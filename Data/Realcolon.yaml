%YAML:1.0
# Camera calibration and distortion parameters
# realcolon 4
Camera.fx: 733.0653
Camera.fy: 734.3432
Camera.cx: 743.3353
Camera.cy: 539.6794

Camera.d0: -0.1273872
Camera.d1: -0.006822601
Camera.d2: 0.001757994
Camera.d3: -8.190911e-05

# Camera.k1: -0.1273872
# Camera.k2: -0.006822601
# Camera.p1: 0.001757994
# Camera.p2: -8.190911e-05

# Camera resolution
Camera.cols: 1440
Camera.rows: 1080

# Number of features per image
FeatureExtractor.nFeatures: 8192

# Number of levels in the scale pyramid
FeatureExtractor.nScales: 4

# Scale factor between levels in the scale pyramid
FeatureExtractor.fScaleFactor: 1.666666666

# Feature grid dimensions
FeatureGrid.nGridCols: 64
FeatureGrid.nGridRows: 48

#Essential Matrix threshold
#Epipolar.th: 0.002
Epipolar.th: 0.5

#Feature matching Hamming distance thresholds
Matching.initialization: 35
Matching.guidedMatching: 50
Matching.searchByProjection: 100
Matching.searchForTriangulation: 50
Matching.fuse: 50

#radius
Matching.initialization.radius: 12

#Covisivility graph
Map.minObs: 6

#Min cos parallax to triangulate
Triangulation.minCos: 0.15

#Inliers and reprojection checks
Triangulation.checks: "false"

#depth limit
Triangulation.depthLimit: 10.0

# LUIS
#Cameras poses
Camera.FirstPose.x: 0.0
Camera.FirstPose.y: 0.0
Camera.FirstPose.z: 0.0
Camera.SecondPose.x: 0.14
Camera.SecondPose.y: 0.01
Camera.SecondPose.z: 0.06

#Simulated typical desviation reprojection error for keypoints
Keypoints.RepError: 1.0
Keypoints.decimalsApproximation: 1

#Simulated typical desviation depth measurements error (mm)
Measurements.DepthError: 0.000
Measurements.DepthWeight: 300
Measurements.DepthScale.C1: 1.0
Measurements.DepthScale.C2: 1.0
Measurements.Depth.Scale: 0.0004577706569009

#Weights for optimization
Optimization.rep: 1
Optimization.global: 1
# Optimization.arap: 10000000
Optimization.arap: 10000
Optimization.alpha:  1
Optimization.beta: 1

#Optimization values
Optimization.numberOfOptimizations: 30
Optimization.numberOfIterations: 30

Optimization.selection: "twoOptimizations" # g2oArap or open3DArap or twoOptimizations
Optimization.weightsSelection: "nlopt" # nlopt or eigen

Optimization.nlopt.numberOfIterations: 30
Optimization.nlopt.relTolerance: 1.0e-3
Optimization.nlopt.absTolerance: 1.0e-3
Optimization.nlopt.rep.lowerBound: 1
Optimization.nlopt.rep.upperBound: 1
Optimization.nlopt.global.lowerBound: 1
Optimization.nlopt.global.upperBound: 1
Optimization.nlopt.arap.lowerBound: 0.000000001
Optimization.nlopt.arap.upperBound: 10000000000000

Experiment.Filepath: "./Data/Experiment.txt"

#Method selection
Triangulation.method: "NRSLAM" # Classic NRSLAM ORBSLAM DepthMeasurement
# Classic: Use standard triangulation calculation
# NRSLAM: use NRSLAM weighted midpoint method
# ORBSLAM: use ORBSLAM linear method
# DepthMeasurement: use depth measurements 
Triangulation.seed.location: "FarPoints"
# inRays: SVD triangulation method, choosing the points nearest to the solution in both rays
# TwoPoints: SVD triangulation method, choosing both points as the solution
# FarPoints: Use points far from the rays, with the same distance to the triangulated point but in the other direction


# Visualization
MapVisualizer.showScene: "true"
MapVisualizer.drawRays: "false"
Visualizer.showSolution: "false"
Execution.stop: "true"
